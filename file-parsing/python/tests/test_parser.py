from beacon import beaconfrom unittest import TestCasefrom pathlib import Pathimport osfrom typing import List, Dictclass ParserTest(TestCase):    def setUp(self) -> None:        p = Path(os.path.dirname(__file__)).parent.parent        self.file_path = str(p) + "/input.json"        self.json = beacon.Beacon().deserialize_json(self.file_path)        self.antenna_ids = [201,202,203,204,205,206]    def testExample(self):        assert(self.json is not None)    def testType(self):        assert(isinstance(self.json, List))    def testLen(self):        assert(len(self.json) == 26)    def testFirst(self):        assert(self.json[0]['BeaconId'] == 208)    def testFourth(self):        assert(self.json[4]['BeaconId'] == 112)        assert (self.json[4]['ant_id'] == 201)        assert(self.json[4]['dbm_ant'] == -84.76679099514944)    def testGroupByBeacon(self):        groups = beacon.Beacon().group_by_beacon(self.json, self.antenna_ids)        assert(isinstance(groups, Dict))        assert (groups["208, 2016-11-22T09:46:00.000Z"][1] == -68.74636830519334)        assert (groups["112, 2016-11-22T09:47:00.00Z"][0] == -84.76679099514944)        assert (groups["112, 2016-11-22T09:47:00.00Z"][2] == -68.58154321681343)